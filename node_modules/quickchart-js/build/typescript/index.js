"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var axios_1 = __importDefault(require("axios"));
var javascript_stringify_1 = require("javascript-stringify");
var SPECIAL_FUNCTION_REGEX = /['"]__BEGINFUNCTION__(.*?)__ENDFUNCTION__['"]/g;
function doStringify(chartConfig) {
    var str = javascript_stringify_1.stringify(chartConfig);
    if (!str) {
        return undefined;
    }
    return str.replace(SPECIAL_FUNCTION_REGEX, '$1');
}
var QuickChart = /** @class */ (function () {
    function QuickChart(apiKey, accountId) {
        this.apiKey = apiKey;
        this.accountId = accountId;
        this.host = 'quickchart.io';
        this.protocol = 'https';
        this.baseUrl = this.protocol + "://" + this.host;
        this.chart = undefined;
        this.width = 500;
        this.height = 300;
        this.devicePixelRatio = 1.0;
        this.backgroundColor = '#ffffff';
        this.format = 'png';
        this.version = '2.9.4';
    }
    QuickChart.prototype.setConfig = function (chartConfig) {
        this.chart = typeof chartConfig === 'string' ? chartConfig : doStringify(chartConfig);
        return this;
    };
    QuickChart.prototype.setWidth = function (width) {
        this.width = width;
        return this;
    };
    QuickChart.prototype.setHeight = function (height) {
        this.height = height;
        return this;
    };
    QuickChart.prototype.setBackgroundColor = function (color) {
        this.backgroundColor = color;
        return this;
    };
    QuickChart.prototype.setDevicePixelRatio = function (ratio) {
        this.devicePixelRatio = ratio;
        return this;
    };
    QuickChart.prototype.setFormat = function (fmt) {
        this.format = fmt;
        return this;
    };
    QuickChart.prototype.setVersion = function (version) {
        this.version = version;
        return this;
    };
    QuickChart.prototype.isValid = function () {
        if (!this.chart) {
            return false;
        }
        return true;
    };
    QuickChart.prototype.getUrlObject = function () {
        if (!this.isValid()) {
            throw new Error('You must call setConfig before getUrl');
        }
        var ret = new URL(this.baseUrl + "/chart");
        ret.searchParams.append('c', this.chart);
        ret.searchParams.append('w', String(this.width));
        ret.searchParams.append('h', String(this.height));
        if (this.devicePixelRatio !== 1.0) {
            ret.searchParams.append('devicePixelRatio', String(this.devicePixelRatio));
        }
        if (this.backgroundColor) {
            ret.searchParams.append('bkg', this.backgroundColor);
        }
        if (this.format) {
            ret.searchParams.append('f', this.format);
        }
        if (this.version) {
            ret.searchParams.append('v', this.version);
        }
        if (this.apiKey) {
            ret.searchParams.append('key', this.apiKey);
        }
        return ret;
    };
    QuickChart.prototype.getUrl = function () {
        return this.getUrlObject().href;
    };
    QuickChart.prototype.getSignedUrl = function () {
        if (!this.accountId || !this.apiKey) {
            throw new Error('You must set accountId and apiKey in the QuickChart constructor to use getSignedUrl()');
        }
        var crypto = require('crypto');
        var urlObj = this.getUrlObject();
        var chartStr = urlObj.searchParams.get('c');
        var signature = crypto.createHmac('sha256', this.apiKey).update(chartStr).digest('hex');
        urlObj.searchParams.append('sig', signature);
        urlObj.searchParams.append('accountId', this.accountId);
        urlObj.searchParams["delete"]('key');
        return urlObj.href;
    };
    QuickChart.prototype.getPostData = function () {
        if (!this.isValid()) {
            throw new Error('You must call setConfig creating post data');
        }
        var _a = this, width = _a.width, height = _a.height, chart = _a.chart, format = _a.format, version = _a.version, backgroundColor = _a.backgroundColor, devicePixelRatio = _a.devicePixelRatio, apiKey = _a.apiKey;
        var postData = {
            width: width,
            height: height,
            chart: chart
        };
        if (format) {
            postData.format = format;
        }
        if (version) {
            postData.version = version;
        }
        if (backgroundColor) {
            postData.backgroundColor = backgroundColor;
        }
        if (devicePixelRatio) {
            postData.devicePixelRatio = devicePixelRatio;
        }
        if (apiKey) {
            postData.key = apiKey;
        }
        return postData;
    };
    QuickChart.prototype.getShortUrl = function () {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isValid()) {
                            throw new Error('You must call setConfig before getUrl');
                        }
                        if (this.host !== 'quickchart.io') {
                            throw new Error('Short URLs must use quickchart.io host');
                        }
                        return [4 /*yield*/, axios_1["default"].post(this.baseUrl + "/chart/create", this.getPostData())];
                    case 1:
                        resp = _a.sent();
                        if (resp.status !== 200) {
                            throw "Bad response code " + resp.status + " from chart shorturl endpoint";
                        }
                        else if (!resp.data.success) {
                            throw 'Received failure response from chart shorturl endpoint';
                        }
                        else {
                            return [2 /*return*/, resp.data.url];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    QuickChart.prototype.toBinary = function () {
        return __awaiter(this, void 0, void 0, function () {
            var resp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isValid()) {
                            throw new Error('You must call setConfig before getUrl');
                        }
                        return [4 /*yield*/, axios_1["default"].post(this.baseUrl + "/chart", this.getPostData(), {
                                responseType: 'arraybuffer'
                            })];
                    case 1:
                        resp = _a.sent();
                        if (resp.status !== 200) {
                            throw "Bad response code " + resp.status + " from chart shorturl endpoint";
                        }
                        return [2 /*return*/, Buffer.from(resp.data, 'binary')];
                }
            });
        });
    };
    QuickChart.prototype.toDataUrl = function () {
        return __awaiter(this, void 0, void 0, function () {
            var buf, b64buf, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.toBinary()];
                    case 1:
                        buf = _a.sent();
                        b64buf = buf.toString('base64');
                        type = this.format === 'svg' ? 'svg+xml' : 'png';
                        return [2 /*return*/, "data:image/" + type + ";base64," + b64buf];
                }
            });
        });
    };
    QuickChart.prototype.toFile = function (pathOrDescriptor) {
        return __awaiter(this, void 0, void 0, function () {
            var fs, buf;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fs = require('fs');
                        return [4 /*yield*/, this.toBinary()];
                    case 1:
                        buf = _a.sent();
                        fs.writeFileSync(pathOrDescriptor, buf);
                        return [2 /*return*/];
                }
            });
        });
    };
    QuickChart.getGradientFillHelper = function (direction, colors, dimensions) {
        return "__BEGINFUNCTION__getGradientFillHelper(" + JSON.stringify(direction) + ", " + JSON.stringify(colors) + ", " + JSON.stringify(dimensions) + ")__ENDFUNCTION__";
    };
    QuickChart.getGradientFill = function (colorOptions, linearGradient) {
        return "__BEGINFUNCTION__getGradientFill(" + JSON.stringify(colorOptions) + ", " + JSON.stringify(linearGradient) + ")__ENDFUNCTION__";
    };
    QuickChart.getImageFill = function (url) {
        return "__BEGINFUNCTION__getImageFill(" + JSON.stringify(url) + ")__ENDFUNCTION__";
    };
    QuickChart.pattern = {
        draw: function (shapeType, backgroundColor, patternColor, requestedSize) {
            return "__BEGINFUNCTION__pattern.draw(" + JSON.stringify(shapeType) + ", " + JSON.stringify(backgroundColor) + ", " + JSON.stringify(patternColor) + ", " + JSON.stringify(requestedSize) + ")__ENDFUNCTION__";
        }
    };
    return QuickChart;
}());
exports["default"] = QuickChart;
