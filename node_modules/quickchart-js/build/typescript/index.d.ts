/// <reference types="node" />
import type { ChartConfiguration } from 'chart.js';
interface PostData {
    chart: string;
    width?: number;
    height?: number;
    format?: string;
    version?: string;
    backgroundColor?: string;
    devicePixelRatio?: number;
    key?: string;
}
interface GradientFillOption {
    offset: number;
    color: string;
}
interface GradientDimensionOption {
    width?: number;
    height?: number;
}
declare class QuickChart {
    private host;
    private protocol;
    private baseUrl;
    private width;
    private height;
    private devicePixelRatio;
    private backgroundColor;
    private format;
    private version;
    private chart?;
    private apiKey?;
    private accountId?;
    constructor(apiKey?: string, accountId?: string);
    setConfig(chartConfig: string | ChartConfiguration): QuickChart;
    setWidth(width: number): QuickChart;
    setHeight(height: number): QuickChart;
    setBackgroundColor(color: string): QuickChart;
    setDevicePixelRatio(ratio: number): QuickChart;
    setFormat(fmt: string): QuickChart;
    setVersion(version: string): QuickChart;
    isValid(): boolean;
    private getUrlObject;
    getUrl(): string;
    getSignedUrl(): string;
    getPostData(): PostData;
    getShortUrl(): Promise<string>;
    toBinary(): Promise<Buffer>;
    toDataUrl(): Promise<string>;
    toFile(pathOrDescriptor: string): Promise<void>;
    static getGradientFillHelper(direction: string, colors: string[], dimensions?: GradientDimensionOption): string;
    static getGradientFill(colorOptions: GradientFillOption[], linearGradient: [number, number, number, number]): string;
    static getImageFill(url: string): string;
    static pattern: {
        draw: (shapeType: string, backgroundColor: string, patternColor: string, requestedSize: number) => string;
    };
}
export default QuickChart;
