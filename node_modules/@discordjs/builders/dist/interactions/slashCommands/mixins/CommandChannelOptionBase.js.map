{"version":3,"file":"CommandChannelOptionBase.js","sourceRoot":"/","sources":["interactions/slashCommands/mixins/CommandChannelOptionBase.ts"],"names":[],"mappings":";;;;AAAA,gCAAsH;AACtH,yDAAoB;AAEpB,2DAA6D;AAE7D,+GAA+G;AAC/G,MAAM,mBAAmB,GAAG;;;;;;;;;;CAU3B,CAAC;AAEF,MAAM,oBAAoB,GAAG,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;AAElE,MAAsB,4CACrB,SAAQ,0CAAsB;IAD/B;;QAIC;;;;;WAAmF;IA+BpF,CAAC;IA7BA;;;OAGG;IACI,cAAc,CAAC,WAAuE;QAC5F,IAAI,CAAC,YAAY,KAAjB,IAAI,CAAC,YAAY,GAAK,EAAE,EAAC;QAEzB,IAAA,YAAE,EAAC,WAAW,EAAE,cAAc,EAAE,oBAAoB,CAAC,CAAC;QACtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;OAGG;IACI,eAAe,CAAC,YAA0E;QAChG,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;IACb,CAAC;IAEe,MAAM;QACrB,OAAO;YACN,GAAG,KAAK,CAAC,MAAM,EAAE;YACjB,IAAI,iBAAsC;YAC1C,aAAa,EAAE,IAAI,CAAC,YAAY;SAChC,CAAC;IACH,CAAC;CACD;AAnCD,oGAmCC","sourcesContent":["import { APIApplicationCommandChannelOptions, ApplicationCommandOptionType, ChannelType } from 'discord-api-types/v9';\nimport ow from 'ow';\nimport type { ToAPIApplicationCommandOptions } from '../../..';\nimport { SlashCommandOptionBase } from './CommandOptionBase';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildCategory,\n\tChannelType.GuildNews,\n\tChannelType.GuildNewsThread,\n\tChannelType.GuildStore,\n\tChannelType.GuildStageVoice,\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildPublicThread,\n\tChannelType.GuildPrivateThread,\n];\n\nconst channelTypePredicate = ow.number.oneOf(allowedChannelTypes);\n\nexport abstract class ApplicationCommandOptionWithChannelTypesBase\n\textends SlashCommandOptionBase\n\timplements ToAPIApplicationCommandOptions\n{\n\tpublic channelTypes?: Exclude<ChannelType, ChannelType.DM | ChannelType.GroupDM>[];\n\n\t/**\n\t * Adds a channel type to this option\n\t * @param channelType The type of channel to allow\n\t */\n\tpublic addChannelType(channelType: Exclude<ChannelType, ChannelType.DM | ChannelType.GroupDM>) {\n\t\tthis.channelTypes ??= [];\n\n\t\tow(channelType, 'channel type', channelTypePredicate);\n\t\tthis.channelTypes.push(channelType);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds channel types to this option\n\t * @param channelTypes The channel types to add\n\t */\n\tpublic addChannelTypes(channelTypes: Exclude<ChannelType, ChannelType.DM | ChannelType.GroupDM>[]) {\n\t\tchannelTypes.forEach((channelType) => this.addChannelType(channelType));\n\t\treturn this;\n\t}\n\n\tpublic override toJSON(): APIApplicationCommandChannelOptions {\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\ttype: ApplicationCommandOptionType.Channel,\n\t\t\tchannel_types: this.channelTypes,\n\t\t};\n\t}\n}\n"]}