"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationCommandOptionWithChannelTypesBase = void 0;
const tslib_1 = require("tslib");
require("discord-api-types/v9");
const ow_1 = (0, tslib_1.__importDefault)(require("ow"));
const CommandOptionBase_1 = require("./CommandOptionBase");
// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)
const allowedChannelTypes = [
    4 /* GuildCategory */,
    5 /* GuildNews */,
    10 /* GuildNewsThread */,
    6 /* GuildStore */,
    13 /* GuildStageVoice */,
    0 /* GuildText */,
    2 /* GuildVoice */,
    11 /* GuildPublicThread */,
    12 /* GuildPrivateThread */,
];
const channelTypePredicate = ow_1.default.number.oneOf(allowedChannelTypes);
class ApplicationCommandOptionWithChannelTypesBase extends CommandOptionBase_1.SlashCommandOptionBase {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "channelTypes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    /**
     * Adds a channel type to this option
     * @param channelType The type of channel to allow
     */
    addChannelType(channelType) {
        this.channelTypes ?? (this.channelTypes = []);
        (0, ow_1.default)(channelType, 'channel type', channelTypePredicate);
        this.channelTypes.push(channelType);
        return this;
    }
    /**
     * Adds channel types to this option
     * @param channelTypes The channel types to add
     */
    addChannelTypes(channelTypes) {
        channelTypes.forEach((channelType) => this.addChannelType(channelType));
        return this;
    }
    toJSON() {
        return {
            ...super.toJSON(),
            type: 7 /* Channel */,
            channel_types: this.channelTypes,
        };
    }
}
exports.ApplicationCommandOptionWithChannelTypesBase = ApplicationCommandOptionWithChannelTypesBase;
//# sourceMappingURL=CommandChannelOptionBase.js.map