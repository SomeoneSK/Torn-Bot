"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenuCommandBuilder = void 0;
const Assertions_1 = require("./Assertions");
class ContextMenuCommandBuilder {
    constructor() {
        /**
         * The name of this context menu command
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        /**
         * The type of this context menu command
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        /**
         * Whether the command is enabled by default when the app is added to a guild
         * @default true
         */
        Object.defineProperty(this, "defaultPermission", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
    }
    /**
     * Sets the name
     * @param name The name
     */
    setName(name) {
        // Assert the name matches the conditions
        (0, Assertions_1.validateName)(name);
        Reflect.set(this, 'name', name);
        return this;
    }
    /**
     * Sets the type
     * @param type The type
     */
    setType(type) {
        // Assert the type is valid
        (0, Assertions_1.validateType)(type);
        Reflect.set(this, 'type', type);
        return this;
    }
    /**
     * Sets whether the command is enabled by default when the application is added to a guild.
     *
     * **Note**: If set to `false`, you will have to later `PUT` the permissions for this command.
     * @param value Whether or not to enable this command by default
     *
     * @see https://discord.com/developers/docs/interactions/application-commands#permissions
     */
    setDefaultPermission(value) {
        // Assert the value matches the conditions
        (0, Assertions_1.validateDefaultPermission)(value);
        Reflect.set(this, 'defaultPermission', value);
        return this;
    }
    /**
     * Returns the final data that should be sent to Discord.
     *
     * **Note:** Calling this function will validate required properties based on their conditions.
     */
    toJSON() {
        (0, Assertions_1.validateRequiredParameters)(this.name, this.type);
        return {
            name: this.name,
            type: this.type,
            default_permission: this.defaultPermission,
        };
    }
}
exports.ContextMenuCommandBuilder = ContextMenuCommandBuilder;
//# sourceMappingURL=ContextMenuCommandBuilder.js.map